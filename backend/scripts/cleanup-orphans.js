// backend/scripts/cleanup-orphans.js
// Script pour nettoyer les donn√©es orphelines avant d'activer les contraintes FK
require('dotenv').config();
const { sequelize } = require('../src/config/database');
async function cleanupOrphans() {
try {
console.log('üîå Connexion √† PostgreSQL...');
await sequelize.authenticate();
console.log('‚úÖ Connect√©!\n');
// 1Ô∏è‚É£ Compter les runs orphelins
console.log('üîç Recherche de runs orphelins...');
const [countResult] = await sequelize.query(`
  SELECT COUNT(*) as count
  FROM publish_runs pr
  LEFT JOIN publish_jobs pj ON pr."jobId" = pj.id
  WHERE pj.id IS NULL
`);

const orphanCount = parseInt(countResult[0].count, 10);
console.log(`üìä R√©sultat: ${orphanCount} runs orphelins trouv√©s\n`);

if (orphanCount === 0) {
  console.log('‚úÖ Aucune donn√©e orpheline. Base de donn√©es propre!');
  console.log('üëâ Vous pouvez activer constraints: true en toute s√©curit√©.\n');
  await sequelize.close();
  process.exit(0);
}

// 2Ô∏è‚É£ Afficher un aper√ßu
console.log('üìã Aper√ßu des runs orphelins (max 5):');
const [orphans] = await sequelize.query(`
  SELECT 
    pr.id,
    pr."jobId" as missing_job_id,
    pr.status,
    pr."createdAt"
  FROM publish_runs pr
  LEFT JOIN publish_jobs pj ON pr."jobId" = pj.id
  WHERE pj.id IS NULL
  ORDER BY pr."createdAt" DESC
  LIMIT 5
`);

orphans.forEach((run, i) => {
  console.log(`  ${i + 1}. Run ${run.id.slice(0, 8)} ‚Üí Job manquant: ${run.missing_job_id.slice(0, 8)} (${run.status})`);
});
console.log('');

// 3Ô∏è‚É£ Demander confirmation (simulation)
console.log(`‚ö†Ô∏è  Vous √™tes sur le point de supprimer ${orphanCount} runs orphelins.`);
console.log('üóëÔ∏è  Suppression en cours...\n');

// 4Ô∏è‚É£ Supprimer
await sequelize.query(`
  DELETE FROM publish_runs
  WHERE "jobId" NOT IN (SELECT id FROM publish_jobs)
`);

console.log(`‚úÖ ${orphanCount} runs orphelins supprim√©s avec succ√®s!\n`);

// 5Ô∏è‚É£ V√©rification finale
const [verifyResult] = await sequelize.query(`
  SELECT COUNT(*) as count
  FROM publish_runs pr
  LEFT JOIN publish_jobs pj ON pr."jobId" = pj.id
  WHERE pj.id IS NULL
`);

const remainingOrphans = parseInt(verifyResult[0].count, 10);

if (remainingOrphans === 0) {
  console.log('‚úÖ Nettoyage termin√©! Base de donn√©es propre.');
  console.log('üëâ Vous pouvez maintenant red√©marrer l\'app avec constraints: true\n');
} else {
  console.warn(`‚ö†Ô∏è  Attention: Il reste ${remainingOrphans} runs orphelins`);
}

await sequelize.close();
process.exit(0);
} catch (error) {
console.error('‚ùå Erreur lors du nettoyage:');
console.error(error.message);
console.error('\nüí° V√©rifiez que:');
console.error('   - PostgreSQL est d√©marr√©');
console.error('   - Les variables DB_* dans .env sont correctes');
console.error('   - La base de donn√©es existe\n');
process.exit(1);
}
}
