// backend/scripts/force-cleanup.js
// Nettoyage forc√©: supprime les contraintes, nettoie les donn√©es, recr√©e les contraintes
require('dotenv').config();
const { sequelize } = require('../src/config/database');

async function forceCleanup() {
  try {
    console.log('üîß Nettoyage forc√© de la base de donn√©es\n');
    await sequelize.authenticate();

    // 1Ô∏è‚É£ SUPPRIMER toutes les contraintes FK sur publish_runs
    console.log('1Ô∏è‚É£ Suppression des contraintes FK...');
    await sequelize.query(`
      DO $$ 
      DECLARE
        constraint_record RECORD;
      BEGIN
        FOR constraint_record IN 
          SELECT constraint_name 
          FROM information_schema.table_constraints 
          WHERE table_name = 'publish_runs' 
            AND constraint_type = 'FOREIGN KEY'
        LOOP
          EXECUTE 'ALTER TABLE publish_runs DROP CONSTRAINT IF EXISTS ' || constraint_record.constraint_name;
        END LOOP;
      END $$;
    `);
    console.log('   ‚úÖ Contraintes supprim√©es\n');

    // 2Ô∏è‚É£ NETTOYER les donn√©es orphelines
    console.log('2Ô∏è‚É£ Nettoyage des donn√©es orphelines...');

    // Runs avec jobId invalide
    const [deletedJobs] = await sequelize.query(`
      DELETE FROM publish_runs
      WHERE "jobId" IS NOT NULL 
        AND NOT EXISTS (SELECT 1 FROM publish_jobs WHERE id = publish_runs."jobId")
    `);
    console.log(`   üóëÔ∏è  ${deletedJobs.rowCount || 0} runs avec jobId invalide supprim√©s`);

    // Runs avec userId invalide
    const [deletedUsers] = await sequelize.query(`
      DELETE FROM publish_runs
      WHERE "userId" IS NOT NULL 
        AND NOT EXISTS (SELECT 1 FROM users WHERE id = publish_runs."userId")
    `);
    console.log(`   üóëÔ∏è  ${deletedUsers.rowCount || 0} runs avec userId invalide supprim√©s\n`);

    // 3Ô∏è‚É£ RECR√âER les contraintes FK avec CASCADE
    console.log('3Ô∏è‚É£ Recr√©ation des contraintes FK...');

    await sequelize.query(`
      ALTER TABLE publish_runs
      ADD CONSTRAINT publish_runs_jobId_fkey
      FOREIGN KEY ("jobId") 
      REFERENCES publish_jobs(id)
      ON DELETE CASCADE
      ON UPDATE CASCADE;
    `);
    console.log('   ‚úÖ Contrainte jobId cr√©√©e');

    await sequelize.query(`
      ALTER TABLE publish_runs
      ADD CONSTRAINT publish_runs_userId_fkey
      FOREIGN KEY ("userId") 
      REFERENCES users(id)
      ON DELETE CASCADE
      ON UPDATE CASCADE;
    `);
    console.log('   ‚úÖ Contrainte userId cr√©√©e\n');

    // 4Ô∏è‚É£ V√©rification finale
    console.log('4Ô∏è‚É£ V√©rification finale...');
    const [orphans] = await sequelize.query(`
      SELECT COUNT(*) as count
      FROM publish_runs pr
      LEFT JOIN publish_jobs pj ON pr."jobId" = pj.id
      WHERE pj.id IS NULL
    `);

    if (parseInt(orphans[0].count, 10) === 0) {
      console.log('   ‚úÖ Aucune donn√©e orpheline\n');
      console.log('='.repeat(60));
      console.log('üéâ Nettoyage termin√© avec succ√®s!');
      console.log("üëâ Vous pouvez maintenant red√©marrer l'application\n");
    } else {
      console.log(`   ‚ö†Ô∏è  Il reste ${orphans[0].count} runs orphelins\n`);
    }

    await sequelize.close();
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

forceCleanup();
